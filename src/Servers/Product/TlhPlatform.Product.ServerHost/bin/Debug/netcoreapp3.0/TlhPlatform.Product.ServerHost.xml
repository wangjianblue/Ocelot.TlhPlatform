<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TlhPlatform.Product.ServerHost</name>
    </assembly>
    <members>
        <member name="F:TlhPlatform.Product.ServerHost.Configs.Cache.ProductKey.Admin_User_Session">
            <summary>
            后台用户会话key 
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Consumer.ps.Rabbit.Test4">
            <summary>
            第一种模式 （简单队列） 一个生产者 一个消费者
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Consumer.Rabbit.Test1">
            <summary>
            第一种模式 （简单队列） 一个生产者 一个消费者
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Consumer.Rabbit.Test2">
            <summary>
            第二种模式 （Work queues工作队列） 一个生产者多个消费者
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Controllers.TodoController.#ctor(TlhPlatform.Product.Application.Interfaces.ITodoItemService,TlhPlatform.Infrastructure.Cache.Key.IKeyManager,TlhPlatform.Product.Application.Interfaces.IMessageService)">
            <summary>
            实例化一个EF上下文，进行数据库操作。开始初始入库一条数据
            </summary>
            <param name="keyManager"></param>
            <param name="todoItemService"></param>
            <param name="httpClient"></param>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Controllers.TodoController.GetTodoItems">
            <summary>
            获取所有事项
            GET: api/Todo
            </summary>
            <returns></returns>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Controllers.TodoController.DeleteTodoItem(System.Int64)">
            <summary>
            删除一个TodoItem
            </summary>
            <remarks>
             Sample request:
             DELETE: api/Todo/2
            </remarks>
            <param name="id"></param>
            <returns>不返回内容</returns>
            <response code="204">删除成功，不返回内容</response>
            <response code="404">删除失败，未找到该记录</response>
        </member>
        <member name="T:TlhPlatform.Product.ServerHost.Filter.MyAuthorization">
            <summary>
            优先级1：权限过滤器：它在Filter Pipleline中首先运行，并用于决定当前用户是否有请求权限。如果没有请求权限直接返回。
            </summary>
        </member>
        <member name="T:TlhPlatform.Product.ServerHost.Filter.MyExceptionFilterAttribute">
            <summary>
            优先级4：异常过滤器：被应用全局策略处理未处理的异常发生前异常被写入响应体
            </summary>
        </member>
        <member name="T:TlhPlatform.Product.ServerHost.Filter.MyResourceFilterAttribute">
            <summary>
            优先级2：资源过滤器： 它在Authorzation后面运行，同时在后面的其它过滤器完成后还会执行。Resource filters 实现缓存或其它性能原因返回。因为它运行在模型绑定前，所以这里的操作都会影响模型绑定。
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Filter.MyResourceFilterAttribute.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)">
            <summary>
            这个方法会在控制器实例化之前之前
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Filter.MyResourceFilterAttribute.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)">
            <summary>
            这个方法是是Action的OnResultExecuted过滤器执行完之后在执行的（每次执行完Action之后得到就是一个ViewResult）
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:TlhPlatform.Product.ServerHost.Filter.MyResultFilterAttribute">
            <summary>
            优先级5：结果过滤器：它可以在执行Action结果之前执行，且执行Action成功后执行，使用逻辑必须围绕view或格式化执行结果。
            </summary>
        </member>
        <member name="T:TlhPlatform.Product.ServerHost.Receives">
            <summary>
            消费端
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Receives.Order_Receive1">
            <summary>
             消息一
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.Receives.Order_Receive2">
            <summary>
             消息二
            </summary>
        </member>
        <member name="M:TlhPlatform.Product.ServerHost.ServiceCollectionExtensions.AddReceives(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TlhPlatform.Infrastructure.RabbitMQ.RabbitOptions})">
            <summary>
            Adds and configures the consistence services for the consistency.
            </summary>
            <param name="services">The services available in the application.</param>
            <param name="setupAction">An action to configure the <see cref="T:DotNetCore.CAP.CapOptions" />.</param>
            <returns>An <see cref="T:DotNetCore.CAP.CapBuilder" /> for application services.</returns>
        </member>
        <member name="M:ConsoleApp1.ps.Rabbit.Test3">
            <summary>
            第三种模式 （公平分发 能者多劳） 一个生产者多个消费者
            </summary>
        </member>
    </members>
</doc>
